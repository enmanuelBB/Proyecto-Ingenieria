services:
  # Servicio 1: Frontend (Sin cambios)
  frontend:
    build:
      context: ./frontend
    ports:
      - "8081:3000" # Usando el puerto 8081
    environment:
      - NEXT_PUBLIC_API_URL=http://backend:8080
    depends_on:
      backend:
        condition: service_started # Espera a que el backend inicie

  # Servicio 2: Backend (ACTUALIZADO)
  backend:
    build:
      context: ./backend
    ports:
      - "8080:8080"
    environment:
      - SPRING_DATASOURCE_URL=jdbc:mysql://db:3306/tareadb?createDatabaseIfNotExist=true
      - SPRING_DATASOURCE_USERNAME=root
      - SPRING_DATASOURCE_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - SPRING_JPA_HIBERNATE_DDL_AUTO=update
      - SECURITY_JWT_SECRET_KEY=${SECURITY_JWT_SECRET_KEY}
      - SECURITY_JWT_EXPIRATION=86400000
      - SECURITY_JWT_REFRESH_EXPIRATION=604800000
    # --- CAMBIO AQUÍ ---
    # Ahora espera a que la 'db' esté "saludable"
    depends_on:
      db:
        condition: service_healthy

  # Servicio 3: Base de Datos (ACTUALIZADO)
  db:
    image: mysql:8.0
    environment:
      - MYSQL_DATABASE=tareadb
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
    volumes:
      - mysql_data:/var/lib/mysql
    # --- BLOQUE NUEVO AQUÍ ---
    # Esto le dice a Docker cómo comprobar si MySQL está vivo.
    # Intentará hacer 'ping' a la BD con la contraseña.
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${MYSQL_ROOT_PASSWORD}"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  mysql_data: